; ──────────────────────────────────────────────────────────────
;  logic-gate self-test
;  verifies:
;     • add  (5 + 7  = 12)
;     • sub  (10 – 3 =  7)
;     • and  (0xaa & 0xcc = 0x88)
;     • or   (0xa0 | 0x0f = 0xaf)
;     • xor  (0xf0 ^ 0xaa = 0x5a)
;  success  → r5 = 1, halt
;  failure  → r5 = 101-105 (see labels), halt
; ──────────────────────────────────────────────────────────────

__start__:
    ; ---------- add test --------------------------------------
    movi r1, 5
    movi r2, 7
    add  r1, r2          ; r1 = 12
    movi r3, 12
    cmp  r1, r3
    jnz  failadd         ; not equal → error 101

    ; ---------- sub test --------------------------------------
    movi r1, 10
    movi r2, 3
    sub  r1, r2          ; r1 = 7
    movi r3, 7
    cmp  r1, r3
    jnz  failsub         ; not equal → error 102

    ; ---------- and test --------------------------------------
    movi r1, 0xaa        ; 1010 1010b
    movi r2, 0xcc        ; 1100 1100b
    and  r1, r2          ; r1 = 0x88
    movi r3, 0x88
    cmp  r1, r3
    jnz  failand         ; not equal → error 103

    ; ---------- or test ---------------------------------------
    movi r1, 0xa0        ; 1010 0000b
    movi r2, 0x0f        ; 0000 1111b
    or   r1, r2          ; r1 = 0xaf
    movi r3, 0xaf
    cmp  r1, r3
    jnz  failor          ; not equal → error 104

    ; ---------- xor test --------------------------------------
    movi r1, 0xf0        ; 1111 0000b
    movi r2, 0xaa        ; 1010 1010b
    xor  r1, r2          ; r1 = 0x5a
    movi r3, 0x5a
    cmp  r1, r3
    jnz  failxor         ; not equal → error 105

    ; ---------- all good --------------------------------------
success:
    movi r5, 1
    jmp  end

; ---------- failure handlers ----------------------------------
failadd:
    movi r5, 101
    jmp  end

failsub:
    movi r5, 102
    jmp  end

failand:
    movi r5, 103
    jmp  end

failor:
    movi r5, 104
    jmp  end

failxor:
    movi r5, 105
    jmp  end

end:
    halt
